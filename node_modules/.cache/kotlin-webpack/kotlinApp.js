(function (_, Kotlin, $module$kotlinx_html_js, $module$kotlin_react_dom, $module$kotlin_react, $module$kotlin_extensions) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var set_onClickFunction = $module$kotlinx_html_js.kotlinx.html.js.set_onClickFunction_pszlq2$;
  var Unit = Kotlin.kotlin.Unit;
  var RComponent_init = $module$kotlin_react.react.RComponent_init_8bz2yq$;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var RComponent = $module$kotlin_react.react.RComponent;
  var toString = Kotlin.toString;
  var set_onSubmitFunction = $module$kotlinx_html_js.kotlinx.html.js.set_onSubmitFunction_pszlq2$;
  var InputType = $module$kotlinx_html_js.kotlinx.html.InputType;
  var getCallableRef = Kotlin.getCallableRef;
  var set_onChangeFunction = $module$kotlinx_html_js.kotlinx.html.js.set_onChangeFunction_pszlq2$;
  var throwCCE = Kotlin.throwCCE;
  var setState = $module$kotlin_react.react.setState_kpl3tw$;
  var getKClass = Kotlin.getKClass;
  var requireAll = $module$kotlin_extensions.kotlinext.js.requireAll_spd3bs$;
  var render = $module$kotlin_react_dom.react.dom.render_2955dm$;
  var Enum = Kotlin.kotlin.Enum;
  var throwISE = Kotlin.throwISE;
  var split = Kotlin.kotlin.text.split_ip8yn$;
  var substringAfter = Kotlin.kotlin.text.substringAfter_j4ogox$;
  var to = Kotlin.kotlin.to_ujzrz7$;
  var plus = Kotlin.kotlin.collections.plus_e8164j$;
  var println = Kotlin.kotlin.io.println_s8jyv4$;
  var toInt = Kotlin.kotlin.text.toInt_pdl1vz$;
  var toMap = Kotlin.kotlin.collections.toMap_6hr0sd$;
  var Pair = Kotlin.kotlin.Pair;
  Button.prototype = Object.create(RComponent.prototype);
  Button.prototype.constructor = Button;
  Evaluation.prototype = Object.create(RComponent.prototype);
  Evaluation.prototype.constructor = Evaluation;
  ImageBox.prototype = Object.create(RComponent.prototype);
  ImageBox.prototype.constructor = ImageBox;
  Leaderboard.prototype = Object.create(RComponent.prototype);
  Leaderboard.prototype.constructor = Leaderboard;
  SimpleInputField.prototype = Object.create(RComponent.prototype);
  SimpleInputField.prototype.constructor = SimpleInputField;
  VotingPanel.prototype = Object.create(RComponent.prototype);
  VotingPanel.prototype.constructor = VotingPanel;
  GamePhase.prototype = Object.create(Enum.prototype);
  GamePhase.prototype.constructor = GamePhase;
  App.prototype = Object.create(RComponent.prototype);
  App.prototype.constructor = App;
  function Button(props) {
    RComponent_init(props, this);
  }
  var enumEncode = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.attributes.enumEncode_m4whry$;
  var attributesMapOf = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.attributesMapOf_alerag$;
  var BUTTON_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.BUTTON;
  function button$lambda(closure$formEncType, closure$formMethod, closure$type, closure$classes) {
    return function (it) {
      return new BUTTON_init(attributesMapOf(['formenctype', closure$formEncType != null ? enumEncode(closure$formEncType) : null, 'formmethod', closure$formMethod != null ? enumEncode(closure$formMethod) : null, 'type', closure$type != null ? enumEncode(closure$type) : null, 'class', closure$classes]), it);
    };
  }
  var RDOMBuilder_init = $module$kotlin_react_dom.react.dom.RDOMBuilder;
  Button.prototype.render_ss14n$ = function ($receiver) {
    var $receiver_0 = new RDOMBuilder_init(button$lambda(null, null, null, null));
    $receiver_0.unaryPlus_pdl1vz$(this.props.label);
    var $receiver_1 = $receiver_0.attrs;
    set_onClickFunction($receiver_1, this.props.handleClick);
    $receiver_1.disabled = this.props.disabled;
    $receiver.child_2usv9w$($receiver_0.create());
  };
  Button.$metadata$ = {kind: Kind_CLASS, simpleName: 'Button', interfaces: [RComponent]};
  function Evaluation(props) {
    RComponent_init(props, this);
  }
  var attributesMapOf_0 = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.attributesMapOf_jyasbz$;
  var LI_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.LI;
  function li$lambda(closure$classes) {
    return function (it) {
      return new LI_init(attributesMapOf_0('class', closure$classes), it);
    };
  }
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
  var UL_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.UL;
  function ul$lambda(closure$classes) {
    return function (it) {
      return new UL_init(attributesMapOf_0('class', closure$classes), it);
    };
  }
  var DIV_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.DIV;
  function div$lambda(closure$classes) {
    return function (it) {
      return new DIV_init(attributesMapOf_0('class', closure$classes), it);
    };
  }
  Evaluation.prototype.render_ss14n$ = function ($receiver) {
    var $receiver_0 = new RDOMBuilder_init(div$lambda('evaluation'));
    var $receiver_0_0 = new RDOMBuilder_init(ul$lambda(null));
    var $receiver_1 = this.props.players;
    var destination = ArrayList_init($receiver_1.size);
    var tmp$;
    tmp$ = $receiver_1.entries.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_0 = destination.add_11rb$;
      var transform$result;
      if (item.value.first == null || item.value.second == null) {
        transform$result = Unit;
      }
       else {
        var $receiver_0_1 = new RDOMBuilder_init(li$lambda(null));
        $receiver_0_1.unaryPlus_pdl1vz$(item.key + ': ' + '"' + toString(item.value.first) + '"' + ': +' + toString(item.value.second) + ' Points');
        transform$result = $receiver_0_0.child_2usv9w$($receiver_0_1.create());
      }
      tmp$_0.call(destination, transform$result);
    }
    $receiver_0.child_2usv9w$($receiver_0_0.create());
    $receiver.child_2usv9w$($receiver_0.create());
  };
  Evaluation.$metadata$ = {kind: Kind_CLASS, simpleName: 'Evaluation', interfaces: [RComponent]};
  function ImageBox(props) {
    RComponent_init(props, this);
  }
  var IMG_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.IMG;
  function img$lambda(closure$alt, closure$src, closure$classes) {
    return function (it) {
      return new IMG_init(attributesMapOf(['alt', closure$alt, 'src', closure$src, 'class', closure$classes]), it);
    };
  }
  function div$lambda_0(closure$classes) {
    return function (it) {
      return new DIV_init(attributesMapOf_0('class', closure$classes), it);
    };
  }
  ImageBox.prototype.render_ss14n$ = function ($receiver) {
    var $receiver_0 = new RDOMBuilder_init(div$lambda_0('imagebox'));
    var $receiver_0_0 = new RDOMBuilder_init(img$lambda(null, this.props.image, null));
    $receiver_0.child_2usv9w$($receiver_0_0.create());
    $receiver.child_2usv9w$($receiver_0.create());
  };
  ImageBox.$metadata$ = {kind: Kind_CLASS, simpleName: 'ImageBox', interfaces: [RComponent]};
  function Leaderboard(props) {
    RComponent_init(props, this);
  }
  function li$lambda_0(closure$classes) {
    return function (it) {
      return new LI_init(attributesMapOf_0('class', closure$classes), it);
    };
  }
  function ul$lambda_0(closure$classes) {
    return function (it) {
      return new UL_init(attributesMapOf_0('class', closure$classes), it);
    };
  }
  function div$lambda_1(closure$classes) {
    return function (it) {
      return new DIV_init(attributesMapOf_0('class', closure$classes), it);
    };
  }
  Leaderboard.prototype.render_ss14n$ = function ($receiver) {
    var $receiver_0 = new RDOMBuilder_init(div$lambda_1('leaderboard'));
    var $receiver_0_0 = new RDOMBuilder_init(ul$lambda_0(null));
    var $receiver_1 = this.props.players;
    var destination = ArrayList_init($receiver_1.size);
    var tmp$;
    tmp$ = $receiver_1.entries.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_0 = destination.add_11rb$;
      var $receiver_0_1 = new RDOMBuilder_init(li$lambda_0(null));
      $receiver_0_1.unaryPlus_pdl1vz$(item.key + ': ' + item.value + ' Points');
      tmp$_0.call(destination, $receiver_0_0.child_2usv9w$($receiver_0_1.create()));
    }
    $receiver_0.child_2usv9w$($receiver_0_0.create());
    $receiver.child_2usv9w$($receiver_0.create());
  };
  Leaderboard.$metadata$ = {kind: Kind_CLASS, simpleName: 'Leaderboard', interfaces: [RComponent]};
  function SimpleInputField(props) {
    RComponent_init(props, this);
  }
  SimpleInputField.prototype.init_65a95q$ = function ($receiver, props) {
    $receiver.textStuff = '';
  };
  function SimpleInputField$render$lambda$lambda$lambda(this$SimpleInputField) {
    return function (it) {
      it.preventDefault();
      this$SimpleInputField.handleSubmit_9ojx7i$(it);
      return Unit;
    };
  }
  var INPUT_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.INPUT;
  function input$lambda(closure$type, closure$formEncType, closure$formMethod, closure$name, closure$classes) {
    return function (it) {
      return new INPUT_init(attributesMapOf(['type', closure$type != null ? enumEncode(closure$type) : null, 'formenctype', closure$formEncType != null ? enumEncode(closure$formEncType) : null, 'formmethod', closure$formMethod != null ? enumEncode(closure$formMethod) : null, 'name', closure$name, 'class', closure$classes]), it);
    };
  }
  var FORM_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.FORM;
  function form$lambda(closure$action, closure$encType, closure$method, closure$classes) {
    return function (it) {
      return new FORM_init(attributesMapOf(['action', closure$action, 'enctype', closure$encType != null ? enumEncode(closure$encType) : null, 'method', closure$method != null ? enumEncode(closure$method) : null, 'class', closure$classes]), it);
    };
  }
  SimpleInputField.prototype.render_ss14n$ = function ($receiver) {
    var $receiver_0 = new RDOMBuilder_init(form$lambda(null, null, null, null));
    set_onSubmitFunction($receiver_0.attrs, SimpleInputField$render$lambda$lambda$lambda(this));
    var $receiver_0_0 = new RDOMBuilder_init(input$lambda(InputType.text, null, null, null, null));
    var $receiver_1 = $receiver_0_0.attrs;
    $receiver_1.name = 'newElementText';
    $receiver_1.value = this.state.textStuff;
    set_onChangeFunction($receiver_1, getCallableRef('handleChange', function ($receiver, e) {
      return $receiver.handleChange_9ojx7i$(e), Unit;
    }.bind(null, this)));
    $receiver_0.child_2usv9w$($receiver_0_0.create());
    $receiver.child_2usv9w$($receiver_0.create());
  };
  function SimpleInputField$handleChange$lambda(closure$txt) {
    return function ($receiver) {
      $receiver.textStuff = closure$txt;
      return Unit;
    };
  }
  SimpleInputField.prototype.handleChange_9ojx7i$ = function (e) {
    var tmp$;
    var html = Kotlin.isType(tmp$ = e.target, HTMLInputElement) ? tmp$ : throwCCE();
    var txt = html.value;
    setState(this, SimpleInputField$handleChange$lambda(txt));
  };
  function SimpleInputField$handleSubmit$lambda($receiver) {
    $receiver.textStuff = '';
    return Unit;
  }
  SimpleInputField.prototype.handleSubmit_9ojx7i$ = function (e) {
    setState(this, SimpleInputField$handleSubmit$lambda);
    this.props.handleNameAdd(this.state.textStuff);
  };
  SimpleInputField.$metadata$ = {kind: Kind_CLASS, simpleName: 'SimpleInputField', interfaces: [RComponent]};
  function VotingPanel(props) {
    RComponent_init(props, this);
  }
  function VotingPanel$render$lambda$lambda$lambda(this$VotingPanel, closure$it) {
    return function (f) {
      this$VotingPanel.props.buttonPressHandler(closure$it.key);
      return Unit;
    };
  }
  function VotingPanel$render$lambda$lambda(this$VotingPanel, closure$it) {
    return function ($receiver) {
      $receiver.attrs.label = this$VotingPanel.props.shouldShow ? closure$it.value : '\uD83E\uDD14';
      $receiver.attrs.handleClick = VotingPanel$render$lambda$lambda$lambda(this$VotingPanel, closure$it);
      $receiver.attrs.disabled = !this$VotingPanel.props.shouldEnable || !this$VotingPanel.props.shouldShow;
      return Unit;
    };
  }
  VotingPanel.prototype.render_ss14n$ = function ($receiver) {
    var $receiver_0 = this.props.options;
    var destination = ArrayList_init($receiver_0.size);
    var tmp$;
    tmp$ = $receiver_0.entries.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$($receiver.child_bzgiuu$(getKClass(Button), VotingPanel$render$lambda$lambda(this, item)));
    }
  };
  VotingPanel.$metadata$ = {kind: Kind_CLASS, simpleName: 'VotingPanel', interfaces: [RComponent]};
  function main$lambda$lambda($receiver) {
    return Unit;
  }
  function main$lambda($receiver) {
    $receiver.child_bzgiuu$(getKClass(App), main$lambda$lambda);
    return Unit;
  }
  function main(args) {
    requireAll(require.context('src', true, /\.css$/));
    render(document.getElementById('root'), void 0, main$lambda);
  }
  function Player(name, points, lastRoundPoints) {
    this.name = name;
    this.points = points;
    this.lastRoundPoints = lastRoundPoints;
  }
  Player.$metadata$ = {kind: Kind_CLASS, simpleName: 'Player', interfaces: []};
  function GamePhase(name, ordinal, desc) {
    Enum.call(this);
    this.desc = desc;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function GamePhase_initFields() {
    GamePhase_initFields = function () {
    };
    GamePhase$NEED_NAME_instance = new GamePhase('NEED_NAME', 0, 'Need name.');
    GamePhase$NEED_GAME_ID_instance = new GamePhase('NEED_GAME_ID', 1, 'Need Game Id.');
    GamePhase$WAITING_FOR_NEXT_ROUND_instance = new GamePhase('WAITING_FOR_NEXT_ROUND', 2, 'Waiting for next round');
    GamePhase$GUESS_instance = new GamePhase('GUESS', 3, 'Enter your guess');
    GamePhase$VOTE_instance = new GamePhase('VOTE', 4, 'Vote for the best results');
  }
  var GamePhase$NEED_NAME_instance;
  function GamePhase$NEED_NAME_getInstance() {
    GamePhase_initFields();
    return GamePhase$NEED_NAME_instance;
  }
  var GamePhase$NEED_GAME_ID_instance;
  function GamePhase$NEED_GAME_ID_getInstance() {
    GamePhase_initFields();
    return GamePhase$NEED_GAME_ID_instance;
  }
  var GamePhase$WAITING_FOR_NEXT_ROUND_instance;
  function GamePhase$WAITING_FOR_NEXT_ROUND_getInstance() {
    GamePhase_initFields();
    return GamePhase$WAITING_FOR_NEXT_ROUND_instance;
  }
  var GamePhase$GUESS_instance;
  function GamePhase$GUESS_getInstance() {
    GamePhase_initFields();
    return GamePhase$GUESS_instance;
  }
  var GamePhase$VOTE_instance;
  function GamePhase$VOTE_getInstance() {
    GamePhase_initFields();
    return GamePhase$VOTE_instance;
  }
  GamePhase.$metadata$ = {kind: Kind_CLASS, simpleName: 'GamePhase', interfaces: [Enum]};
  function GamePhase$values() {
    return [GamePhase$NEED_NAME_getInstance(), GamePhase$NEED_GAME_ID_getInstance(), GamePhase$WAITING_FOR_NEXT_ROUND_getInstance(), GamePhase$GUESS_getInstance(), GamePhase$VOTE_getInstance()];
  }
  GamePhase.values = GamePhase$values;
  function GamePhase$valueOf(name) {
    switch (name) {
      case 'NEED_NAME':
        return GamePhase$NEED_NAME_getInstance();
      case 'NEED_GAME_ID':
        return GamePhase$NEED_GAME_ID_getInstance();
      case 'WAITING_FOR_NEXT_ROUND':
        return GamePhase$WAITING_FOR_NEXT_ROUND_getInstance();
      case 'GUESS':
        return GamePhase$GUESS_getInstance();
      case 'VOTE':
        return GamePhase$VOTE_getInstance();
      default:throwISE('No enum constant index.GamePhase.' + name);
    }
  }
  GamePhase.valueOf_61zpoe$ = GamePhase$valueOf;
  var gameName;
  function App(props) {
    RComponent_init(props, this);
    this.timerId = null;
  }
  var emptyMap = Kotlin.kotlin.collections.emptyMap_q3lmfv$;
  function App$init$lambda$lambda($receiver) {
    $receiver.guesses = emptyMap();
    $receiver.phase = GamePhase$GUESS_getInstance();
    var tmp$;
    tmp$ = $receiver.players.values.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.lastRoundPoints = null;
    }
    return Unit;
  }
  function App$init$lambda$lambda_0($receiver) {
    $receiver.canVote = true;
    $receiver.phase = GamePhase$VOTE_getInstance();
    return Unit;
  }
  function App$init$lambda$lambda_1($receiver) {
    $receiver.phase = GamePhase$WAITING_FOR_NEXT_ROUND_getInstance();
    return Unit;
  }
  function App$init$lambda$lambda_2(closure$str, closure$it) {
    return function ($receiver) {
      $receiver.guesses = plus($receiver.guesses, to(closure$str.get_za3lpa$(1), substringAfter(substringAfter(toString(closure$it.data), ' '), ' ')));
      return Unit;
    };
  }
  function App$init$lambda$lambda_3(closure$str) {
    return function ($receiver) {
      $receiver.players = plus($receiver.players, to(closure$str.get_za3lpa$(1), new Player(closure$str.get_za3lpa$(2), toInt(closure$str.get_za3lpa$(3)), null)));
      return Unit;
    };
  }
  function App$init$lambda$lambda_4(closure$uuid, closure$amount) {
    return function ($receiver) {
      var tmp$;
      if ((tmp$ = $receiver.players.get_11rb$(closure$uuid)) != null) {
        var closure$amount_0 = closure$amount;
        tmp$.points = tmp$.points + toInt(closure$amount_0) | 0;
        tmp$.lastRoundPoints = toInt(closure$amount_0);
      }
      return Unit;
    };
  }
  function App$init$lambda$lambda_5(closure$str) {
    return function ($receiver) {
      $receiver.image = closure$str.get_za3lpa$(1);
      return Unit;
    };
  }
  function App$init$lambda$lambda_6(closure$str) {
    return function ($receiver) {
      $receiver.timeRemaining = toInt(closure$str.get_za3lpa$(1));
      return Unit;
    };
  }
  function App$init$lambda$lambda$lambda(this$App) {
    return function ($receiver) {
      var tmp$;
      if (this$App.state.timeRemaining > 0) {
        $receiver.timeRemaining = $receiver.timeRemaining - 1 | 0;
      }
       else {
        if ((tmp$ = this$App.timerId) != null) {
          window.clearInterval(tmp$);
        }
      }
      return Unit;
    };
  }
  function App$init$lambda$lambda_7(this$App) {
    return function () {
      setState(this$App, App$init$lambda$lambda$lambda(this$App));
      return Unit;
    };
  }
  function App$init$lambda(this$App) {
    return function (it) {
      var tmp$;
      if (Kotlin.isType(it, MessageEvent)) {
        console.log(it.data);
        var str = split(toString(it.data), [' ']);
        switch (str.get_za3lpa$(0).toLowerCase()) {
          case 'startround':
            setState(this$App, App$init$lambda$lambda);
            break;
          case 'votenow':
            setState(this$App, App$init$lambda$lambda_0);
            break;
          case 'voteend':
            setState(this$App, App$init$lambda$lambda_1);
            break;
          case 'guess':
            setState(this$App, App$init$lambda$lambda_2(str, it));
            println(this$App.state.guesses);
            break;
          case 'player':
            setState(this$App, App$init$lambda$lambda_3(str));
            break;
          case 'point':
            var uuid = str.get_za3lpa$(1);
            var amount = str.get_za3lpa$(2);
            setState(this$App, App$init$lambda$lambda_4(uuid, amount));
            break;
          case 'image':
            setState(this$App, App$init$lambda$lambda_5(str));
            break;
          case 'time':
            if ((tmp$ = this$App.timerId) != null) {
              window.clearInterval(tmp$);
            }

            setState(this$App, App$init$lambda$lambda_6(str));
            this$App.timerId = window.setInterval(App$init$lambda$lambda_7(this$App), 1000);
            break;
        }
      }
      return Unit;
    };
  }
  App.prototype.init_65a95q$ = function ($receiver, props) {
    $receiver.socket = new WebSocket('ws://0.0.0.0:8080/myws/echo');
    $receiver.image = 'https://via.placeholder.com/350x150';
    $receiver.timeRemaining = 0;
    $receiver.phase = GamePhase$NEED_NAME_getInstance();
    $receiver.guesses = emptyMap();
    $receiver.players = emptyMap();
    $receiver.points = emptyMap();
    $receiver.canVote = true;
    $receiver.socket.onmessage = App$init$lambda(this);
  };
  var P_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.P;
  function p$lambda(closure$classes) {
    return function (it) {
      return new P_init(attributesMapOf_0('class', closure$classes), it);
    };
  }
  function App$render$lambda$lambda$lambda$lambda($receiver) {
    $receiver.phase = GamePhase$NEED_GAME_ID_getInstance();
    return Unit;
  }
  function App$render$lambda$lambda$lambda(this$App) {
    return function (it) {
      this$App.state.socket.send('name ' + it);
      setState(this$App, App$render$lambda$lambda$lambda$lambda);
      return Unit;
    };
  }
  function App$render$lambda$lambda(this$App) {
    return function ($receiver) {
      $receiver.attrs.handleNameAdd = App$render$lambda$lambda$lambda(this$App);
      return Unit;
    };
  }
  var H5_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.H5;
  function h5$lambda(closure$classes) {
    return function (it) {
      return new H5_init(attributesMapOf_0('class', closure$classes), it);
    };
  }
  function App$render$lambda$lambda$lambda$lambda_0(closure$it) {
    return function ($receiver) {
      $receiver.phase = GamePhase$WAITING_FOR_NEXT_ROUND_getInstance();
      $receiver.lobby = closure$it;
      return Unit;
    };
  }
  function App$render$lambda$lambda$lambda_0(this$App) {
    return function (it) {
      this$App.state.socket.send('game ' + it);
      setState(this$App, App$render$lambda$lambda$lambda$lambda_0(it));
      return Unit;
    };
  }
  function App$render$lambda$lambda_0(this$App) {
    return function ($receiver) {
      $receiver.attrs.handleNameAdd = App$render$lambda$lambda$lambda_0(this$App);
      return Unit;
    };
  }
  function App$render$lambda$lambda_1(this$App) {
    return function (it) {
      this$App.state.socket.send('start');
      return Unit;
    };
  }
  function App$render$lambda(this$App) {
    return function ($receiver) {
      $receiver.attrs.label = 'Start Game';
      $receiver.attrs.handleClick = App$render$lambda$lambda_1(this$App);
      return Unit;
    };
  }
  function App$render$lambda_0(this$App) {
    return function ($receiver) {
      $receiver.attrs.image = this$App.state.image;
      return Unit;
    };
  }
  function App$render$lambda$lambda_2(this$App) {
    return function (it) {
      this$App.state.socket.send('guess ' + it);
      return Unit;
    };
  }
  function App$render$lambda_1(this$App) {
    return function ($receiver) {
      $receiver.attrs.handleNameAdd = App$render$lambda$lambda_2(this$App);
      return Unit;
    };
  }
  function App$render$lambda$lambda$lambda_1($receiver) {
    $receiver.canVote = false;
    return Unit;
  }
  function App$render$lambda$lambda_3(this$App) {
    return function (it) {
      this$App.state.socket.send('vote ' + it);
      setState(this$App, App$render$lambda$lambda$lambda_1);
      return Unit;
    };
  }
  function App$render$lambda_2(this$App) {
    return function ($receiver) {
      $receiver.attrs.buttonPressHandler = App$render$lambda$lambda_3(this$App);
      $receiver.attrs.options = this$App.state.guesses;
      $receiver.attrs.shouldEnable = this$App.state.canVote;
      $receiver.attrs.shouldShow = this$App.state.phase === GamePhase$VOTE_getInstance();
      return Unit;
    };
  }
  function App$render$lambda_3(this$App) {
    return function ($receiver) {
      var tmp$ = $receiver.attrs;
      var $receiver_0 = this$App.state.players;
      var destination = ArrayList_init($receiver_0.size);
      var tmp$_0;
      tmp$_0 = $receiver_0.entries.iterator();
      while (tmp$_0.hasNext()) {
        var item = tmp$_0.next();
        destination.add_11rb$(to(item.value.name, item.value.points));
      }
      tmp$.players = toMap(destination);
      return Unit;
    };
  }
  var LinkedHashMap_init = Kotlin.kotlin.collections.LinkedHashMap_init_q3lmfv$;
  function App$render$lambda_4(this$App) {
    return function ($receiver) {
      var tmp$ = $receiver.attrs;
      var $receiver_0 = this$App.state.players;
      var tmp$_0;
      var result = LinkedHashMap_init();
      tmp$_0 = $receiver_0.entries.iterator();
      while (tmp$_0.hasNext()) {
        var entry = tmp$_0.next();
        if (entry.value.lastRoundPoints != null) {
          result.put_xwzc9p$(entry.key, entry.value);
        }
      }
      var destination = ArrayList_init(result.size);
      var tmp$_1;
      tmp$_1 = result.entries.iterator();
      while (tmp$_1.hasNext()) {
        var item = tmp$_1.next();
        var tmp$_2 = destination.add_11rb$;
        var this$App_0 = this$App;
        tmp$_2.call(destination, to(item.value.name, new Pair(this$App_0.state.guesses.get_11rb$(item.key), item.value.lastRoundPoints)));
      }
      tmp$.players = toMap(destination);
      return Unit;
    };
  }
  var H1_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.H1;
  function h1$lambda(closure$classes) {
    return function (it) {
      return new H1_init(attributesMapOf_0('class', closure$classes), it);
    };
  }
  function div$lambda_2(closure$classes) {
    return function (it) {
      return new DIV_init(attributesMapOf_0('class', closure$classes), it);
    };
  }
  var H3_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.H3;
  function h3$lambda(closure$classes) {
    return function (it) {
      return new H3_init(attributesMapOf_0('class', closure$classes), it);
    };
  }
  App.prototype.render_ss14n$ = function ($receiver) {
    var $receiver_0 = new RDOMBuilder_init(h1$lambda(null));
    var tmp$;
    switch (this.state.phase.name) {
      case 'NEED_NAME':
        tmp$ = 'Titular \u2013 Welcome!';
        break;
      case 'NEED_GAME_ID':
        tmp$ = 'Titular \u2013 Join a Lobby';
        break;
      case 'WAITING_FOR_NEXT_ROUND':
        tmp$ = gameName + ': Lobby #' + toString(this.state.lobby);
        break;
      default:tmp$ = gameName;
        break;
    }
    $receiver_0.unaryPlus_pdl1vz$(tmp$);
    $receiver.child_2usv9w$($receiver_0.create());
    var $receiver_0_0 = new RDOMBuilder_init(div$lambda_2('statusbox'));
    var $receiver_0_1 = new RDOMBuilder_init(p$lambda(null));
    $receiver_0_1.unaryPlus_pdl1vz$(this.state.phase.desc);
    $receiver_0_0.child_2usv9w$($receiver_0_1.create());
    $receiver.child_2usv9w$($receiver_0_0.create());
    if (this.state.phase === GamePhase$NEED_NAME_getInstance()) {
      var $receiver_0_2 = new RDOMBuilder_init(div$lambda_2('nameform'));
      var $receiver_0_3 = new RDOMBuilder_init(h5$lambda(null));
      $receiver_0_3.unaryPlus_pdl1vz$('enter name');
      $receiver_0_2.child_2usv9w$($receiver_0_3.create());
      $receiver_0_2.child_bzgiuu$(getKClass(SimpleInputField), App$render$lambda$lambda(this));
      $receiver.child_2usv9w$($receiver_0_2.create());
    }
    if (this.state.phase === GamePhase$NEED_GAME_ID_getInstance()) {
      var $receiver_0_4 = new RDOMBuilder_init(div$lambda_2('gameform'));
      var $receiver_0_5 = new RDOMBuilder_init(h5$lambda(null));
      $receiver_0_5.unaryPlus_pdl1vz$('enter game id');
      $receiver_0_4.child_2usv9w$($receiver_0_5.create());
      $receiver_0_4.child_bzgiuu$(getKClass(SimpleInputField), App$render$lambda$lambda_0(this));
      $receiver.child_2usv9w$($receiver_0_4.create());
    }
    if (this.state.phase === GamePhase$WAITING_FOR_NEXT_ROUND_getInstance()) {
      $receiver.child_bzgiuu$(getKClass(Button), App$render$lambda(this));
    }
    if (this.state.phase === GamePhase$GUESS_getInstance() || this.state.phase === GamePhase$VOTE_getInstance()) {
      var $receiver_0_6 = new RDOMBuilder_init(h5$lambda(null));
      $receiver_0_6.unaryPlus_pdl1vz$('observe image');
      $receiver.child_2usv9w$($receiver_0_6.create());
      $receiver.child_bzgiuu$(getKClass(ImageBox), App$render$lambda_0(this));
      var $receiver_0_7 = new RDOMBuilder_init(h3$lambda(null));
      $receiver_0_7.unaryPlus_pdl1vz$(this.state.timeRemaining.toString() + 's remaining');
      $receiver.child_2usv9w$($receiver_0_7.create());
    }
    if (this.state.phase === GamePhase$GUESS_getInstance()) {
      var $receiver_0_8 = new RDOMBuilder_init(h5$lambda(null));
      $receiver_0_8.unaryPlus_pdl1vz$('enter guess');
      $receiver.child_2usv9w$($receiver_0_8.create());
      $receiver.child_bzgiuu$(getKClass(SimpleInputField), App$render$lambda_1(this));
    }
    if (this.state.phase === GamePhase$VOTE_getInstance()) {
      var $receiver_0_9 = new RDOMBuilder_init(h5$lambda(null));
      $receiver_0_9.unaryPlus_pdl1vz$('vote for your favorite!');
      $receiver.child_2usv9w$($receiver_0_9.create());
    }
    if (this.state.phase === GamePhase$GUESS_getInstance()) {
      var $receiver_0_10 = new RDOMBuilder_init(h5$lambda(null));
      $receiver_0_10.unaryPlus_pdl1vz$('taking suggestions...');
      $receiver.child_2usv9w$($receiver_0_10.create());
    }
    if (this.state.phase === GamePhase$GUESS_getInstance() || this.state.phase === GamePhase$VOTE_getInstance()) {
      $receiver.child_bzgiuu$(getKClass(VotingPanel), App$render$lambda_2(this));
    }
    $receiver.child_bzgiuu$(getKClass(Leaderboard), App$render$lambda_3(this));
    if (this.state.phase === GamePhase$WAITING_FOR_NEXT_ROUND_getInstance()) {
      $receiver.child_bzgiuu$(getKClass(Evaluation), App$render$lambda_4(this));
    }
  };
  App.$metadata$ = {kind: Kind_CLASS, simpleName: 'App', interfaces: [RComponent]};
  var package$index = _.index || (_.index = {});
  $$importsForInline$$['kotlin-react-dom'] = $module$kotlin_react_dom;
  package$index.Button = Button;
  package$index.Evaluation = Evaluation;
  package$index.ImageBox = ImageBox;
  package$index.Leaderboard = Leaderboard;
  package$index.SimpleInputField = SimpleInputField;
  package$index.VotingPanel = VotingPanel;
  package$index.main_kand9s$ = main;
  package$index.Player = Player;
  Object.defineProperty(GamePhase, 'NEED_NAME', {get: GamePhase$NEED_NAME_getInstance});
  Object.defineProperty(GamePhase, 'NEED_GAME_ID', {get: GamePhase$NEED_GAME_ID_getInstance});
  Object.defineProperty(GamePhase, 'WAITING_FOR_NEXT_ROUND', {get: GamePhase$WAITING_FOR_NEXT_ROUND_getInstance});
  Object.defineProperty(GamePhase, 'GUESS', {get: GamePhase$GUESS_getInstance});
  Object.defineProperty(GamePhase, 'VOTE', {get: GamePhase$VOTE_getInstance});
  package$index.GamePhase = GamePhase;
  package$index.App = App;
  gameName = 'Titular';
  main([]);
  return _;
}(module.exports, require('kotlin'), require('kotlinx-html-js'), require('kotlin-react-dom'), require('kotlin-react'), require('kotlin-extensions')));

//# sourceMappingURL=kotlinApp.js.map
