(function (_, Kotlin, $module$core_js_library_fn_object_assign) {
  'use strict';
  var getCallableRef = Kotlin.getCallableRef;
  var defineInlineFunction = Kotlin.defineInlineFunction;
  var wrapFunction = Kotlin.wrapFunction;
  var throwCCE = Kotlin.throwCCE;
  function requireAll(context) {
    var $receiver = context.keys();
    var action = getCallableRef('invoke', function ($receiver, arg) {
      return invoke_1($receiver, arg);
    }.bind(null, context));
    var tmp$;
    for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
      var element = $receiver[tmp$];
      action(element);
    }
  }
  function invoke_1($receiver, arg) {
    return $receiver(arg);
  }
  function clone(obj) {
    var obj_0 = {};
    return $module$core_js_library_fn_object_assign(obj_0, obj);
  }
  var package$kotlinext = _.kotlinext || (_.kotlinext = {});
  var package$js = package$kotlinext.js || (package$kotlinext.js = {});
  package$js.requireAll_spd3bs$ = requireAll;
  package$js.invoke_nbfla$ = invoke_1;
  package$js.clone_issdgt$ = clone;
  return _;
}(module.exports, require('kotlin'), require('core-js/library/fn/object/assign')));

//# sourceMappingURL=kotlin-extensions.js.map
